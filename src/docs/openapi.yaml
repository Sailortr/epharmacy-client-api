openapi: 3.0.3
info:
  title: e-Pharmacy API
  version: 0.1.0
  description: >
    e-Pharmacy backend. Auth, Products, Stores, Cart/Checkout, Reviews.
servers:
  - url: http://localhost:8080
paths:
  /health:
    get:
      summary: Health probe
      responses:
        '200':
          description: OK
  /api/user/register:
    post:
      summary: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name: { type: string }
                email: { type: string, format: email }
                phone: { type: string }
                password: { type: string, format: password }
      responses:
        '201': { description: Created }
        '409': { description: Email already in use }
  /api/user/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, format: password }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401': { description: Invalid credentials }
  /api/user/logout:
    get:
      summary: Logout (revoke access token)
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: Logged out }
        '401': { description: Unauthorized }
  /api/user-info:
    get:
      summary: Current user info
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
  /api/auth/refresh:
    post:
      summary: Refresh Access Token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken: { type: string }
      responses:
        '200': { description: OK }
        '401': { description: Invalid refresh token }

  /api/products:
    get:
      summary: List products
      parameters:
        - in: query; name: q; schema: { type: string }
        - in: query; name: brand; schema: { type: string }
        - in: query; name: tag; schema: { type: string }
        - in: query; name: rx; schema: { type: boolean }
        - in: query; name: minPrice; schema: { type: number, minimum: 0 }
        - in: query; name: maxPrice; schema: { type: number, minimum: 0 }
        - in: query; name: page; schema: { type: integer, minimum: 1, default: 1 }
        - in: query; name: limit; schema: { type: integer, minimum: 1, maximum: 100, default: 12 }
        - in: query; name: sort; schema:
            type: string
            enum: [price, -price, title, -title, createdAt, -createdAt]
            default: createdAt
      responses:
        '200':
          description: OK
  /api/products/{id}:
    get:
      summary: Get product by id
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string, pattern: '^[0-9a-fA-F]{24}$' }
      responses:
        '200': { description: OK }
        '404': { description: Not found }

  /api/stores:
    get:
      summary: List stores
      parameters:
        - in: query; name: q; schema: { type: string }
        - in: query; name: page; schema: { type: integer, default: 1, minimum: 1 }
        - in: query; name: limit; schema: { type: integer, default: 20, minimum: 1, maximum: 100 }
      responses:
        '200': { description: OK }
  /api/stores/nearest:
    get:
      summary: Nearest stores
      parameters:
        - in: query; name: lng; required: true; schema: { type: number }
        - in: query; name: lat; required: true; schema: { type: number }
        - in: query; name: max; schema: { type: integer, default: 5000, minimum: 100, maximum: 50000 }
        - in: query; name: limit; schema: { type: integer, default: 10, minimum: 1, maximum: 50 }
      responses:
        '200': { description: OK }

  /api/cart:
    get:
      summary: Get my cart
      security: [{ bearerAuth: [] }]
      responses:
        '200': { description: OK }
        '401': { description: Unauthorized }
  /api/cart/update:
    put:
      summary: Idempotent cart update
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [items]
              properties:
                items:
                  type: array
                  items:
                    type: object
                    required: [productId, qty]
                    properties:
                      productId: { type: string }
                      qty: { type: integer, minimum: 0, maximum: 999 }
      responses:
        '200': { description: Updated }
        '401': { description: Unauthorized }
        '409': { description: Insufficient stock }
  /api/cart/checkout:
    post:
      summary: Checkout (mock payment)
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                paymentMethod: { type: string, enum: [mock], default: mock }
                clientTotal: { type: number }
      responses:
        '201': { description: Success }
        '400': { description: Cart empty }
        '401': { description: Unauthorized }
        '409': { description: Total mismatch / stock change }

  /api/customer-reviews:
    get:
      summary: List customer reviews for a store
      parameters:
        - in: query; name: storeId; required: true; schema: { type: string, pattern: '^[0-9a-fA-F]{24}$' }
        - in: query; name: page; schema: { type: integer, default: 1, minimum: 1 }
        - in: query; name: limit; schema: { type: integer, default: 10, minimum: 1, maximum: 100 }
        - in: query; name: sort; schema:
            type: string
            enum: [newest, oldest, rating, -rating]
            default: newest
      responses:
        '200': { description: OK }
  /api/reviews:
    post:
      summary: Create or update a review
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [storeId, rating]
              properties:
                storeId: { type: string }
                rating: { type: integer, minimum: 1, maximum: 5 }
                comment: { type: string, maxLength: 1000 }
      responses:
        '200': { description: Saved }
        '401': { description: Unauthorized }
        '404': { description: Store not found }
        '409': { description: Duplicate review }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginResponse:
      type: object
      properties:
        status: { type: integer }
        message: { type: string }
        data:
          type: object
          properties:
            accessToken: { type: string }
            refreshToken: { type: string }
            user:
              type: object
              properties:
                name: { type: string }
                email: { type: string }
